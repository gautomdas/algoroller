#pragma version 5
txn ApplicationID
int 0
==
bnz main_l12
txn OnCompletion
int OptIn
==
bnz main_l11
txn OnCompletion
int CloseOut
==
bnz main_l10
txn OnCompletion
int UpdateApplication
==
bnz main_l9
txn OnCompletion
int DeleteApplication
==
bnz main_l8
txn OnCompletion
int NoOp
==
bnz main_l7
err
main_l7:
gtxn 0 Amount
int 5000
>
gtxn 0 Amount
global CurrentApplicationAddress
balance
int 2
/
<
&&
assert
itxn_begin
int pay
itxn_field TypeEnum
txna ApplicationArgs 0
btoi
int 1
callsub sub1
itxn_field Amount
txn Sender
itxn_field Receiver
itxn_submit
itxn_begin
int pay
itxn_field TypeEnum
gtxn 0 Amount
int 2
/
itxn_field Amount
global CreatorAddress
itxn_field Receiver
itxn_submit
byte "random"
callsub sub0
int 0
int 8
extract3
btoi
app_global_put
int 1
return
main_l8:
int 1
return
main_l9:
int 1
return
main_l10:
int 0
return
main_l11:
int 0
return
main_l12:
byte "random"
int 0
app_global_put
int 1
return
sub0: // algorando
byte "Nonce"
app_global_get
itob
global LatestTimestamp
itob
concat
txn Sender
concat
global CurrentApplicationAddress
balance
itob
concat
gtxn 0 TxID
concat
sha512_256
retsub
sub1: // calculate_payout
store 1
store 0
load 0
int 0
==
bnz sub1_l10
load 0
int 1
==
bnz sub1_l7
load 0
int 2
==
bnz sub1_l4
err
sub1_l4:
load 1
int 0
>
load 1
int 2
%
int 0
==
&&
bnz sub1_l6
int 0
b sub1_l13
sub1_l6:
gtxn 0 Amount
int 2
*
b sub1_l13
sub1_l7:
load 1
int 2
%
int 1
==
bnz sub1_l9
int 0
b sub1_l13
sub1_l9:
gtxn 0 Amount
int 2
*
b sub1_l13
sub1_l10:
load 1
int 0
==
bnz sub1_l12
int 0
b sub1_l13
sub1_l12:
gtxn 0 Amount
int 14
*
sub1_l13:
retsub